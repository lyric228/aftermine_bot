/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,17],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[1,22],$Vj=[1,23],$Vk=[1,24],$Vl=[1,25],$Vm=[1,26],$Vn=[1,27],$Vo=[1,28],$Vp=[1,29],$Vq=[1,30],$Vr=[1,31],$Vs=[1,32],$Vt=[1,33],$Vu=[1,34],$Vv=[1,35],$Vw=[1,36],$Vx=[1,37],$Vy=[1,38],$Vz=[1,39],$VA=[1,40],$VB=[1,41],$VC=[1,42],$VD=[1,43],$VE=[1,44],$VF=[1,45],$VG=[1,46],$VH=[1,47],$VI=[1,48],$VJ=[1,49],$VK=[5,7],$VL=[1,91],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[2,74],$VS=[1,105],$VT=[1,106],$VU=[1,107],$VV=[1,108],$VW=[1,109],$VX=[1,110],$VY=[1,111],$VZ=[1,112],$V_=[1,101],$V$=[1,104],$V01=[1,99],$V11=[1,100],$V21=[1,113],$V31=[1,117],$V41=[1,127],$V51=[1,137],$V61=[1,135],$V71=[1,136],$V81=[1,140],$V91=[1,151],$Va1=[1,150],$Vb1=[1,199],$Vc1=[1,200],$Vd1=[1,202],$Ve1=[1,203];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"exp":4,"EOF":5,"if":6,"S":7,"condition":8,"then":9,"else":10,"endif":11,"repeat":12,"until":13,"done":14,"stopRepeat":15,"do":16,"listeE":17,"task":18,"achieve":19,"tcc":20,"give":21,"position":22,"int":23,"item":24,"everything":25,"tossEverything":26,"sdig":27,"sbuild":28,"cget":29,"simpleItem":30,"replicate":31,"watch":32,"entity":33,"stopWatch":34,"ssdig":35,"dig":36,"ssumove":37,"sumove":38,"smove":39,"moveTo":40,"move":41,"pos":42,"simplePlayer":43,"lookFor":44,"block":45,"stopMoveTo":46,"list":47,"toss":48,"equip":49,"destination":50,"unequip":51,"lookAt":52,"say":53,"message":54,"wait":55,"activateItem":56,"deactivateItem":57,"build":58,"craft":59,"jump":60,"digForward":61,"immure":62,"attack":63,"shoot":64,"get":65,"simpleBlock":66,"sget":67,"follow":68,"up":69,"nothing":70,"T":71,"N":72,".":73,"toolToBreak":74,"itemToBuild":75,"me":76,"bot":77,"player":78,"nearestMob":79,"mob":80,"nearestObject":81,"object":82,"nearestVisibleMob":83,"nearestReachableMob":84,"nearestReachableObject":85,"*":86,"absolutePosition":87,"adapted":88,"simplePosition":89,"rsimplePosition":90,"+":91,"nearestReachablePosition":92,"blockName":93,"nearestBlock":94,"isEmpty":95,"isNotEmpty":96,"closeOf":97,"have":98,"at":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"if",7:"S",9:"then",10:"else",11:"endif",12:"repeat",13:"until",14:"done",15:"stopRepeat",16:"do",19:"achieve",20:"tcc",21:"give",25:"everything",26:"tossEverything",27:"sdig",28:"sbuild",29:"cget",31:"replicate",32:"watch",34:"stopWatch",35:"ssdig",36:"dig",37:"ssumove",38:"sumove",39:"smove",40:"moveTo",41:"move",42:"pos",44:"lookFor",46:"stopMoveTo",47:"list",48:"toss",49:"equip",51:"unequip",52:"lookAt",53:"say",55:"wait",56:"activateItem",57:"deactivateItem",58:"build",59:"craft",60:"jump",61:"digForward",62:"immure",63:"attack",64:"shoot",65:"get",67:"sget",68:"follow",69:"up",70:"nothing",71:"T",72:"N",73:".",74:"toolToBreak",75:"itemToBuild",76:"me",77:"bot",78:"player",79:"nearestMob",81:"nearestObject",83:"nearestVisibleMob",84:"nearestReachableMob",85:"nearestReachableObject",86:"*",88:"adapted",89:"simplePosition",90:"rsimplePosition",91:"+",92:"nearestReachablePosition",94:"nearestBlock",95:"isEmpty",96:"isNotEmpty",97:"closeOf",98:"have",99:"at"},
productions_: [0,[3,2],[4,13],[4,9],[4,9],[4,5],[4,5],[4,3],[4,1],[18,3],[18,1],[18,7],[18,5],[18,1],[18,3],[18,3],[18,5],[18,1],[18,3],[18,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,1],[18,1],[18,5],[18,5],[18,3],[18,3],[18,3],[18,3],[18,1],[18,1],[18,3],[18,5],[18,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,1],[18,1],[18,1],[23,1],[54,2],[54,3],[50,1],[30,1],[24,1],[24,3],[24,1],[43,1],[33,1],[33,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[80,1],[80,1],[82,1],[82,1],[87,0],[87,3],[87,1],[87,1],[87,1],[22,1],[22,1],[22,3],[22,3],[66,1],[66,1],[93,1],[45,3],[17,5],[17,3],[8,3],[8,3],[8,3],[8,5],[8,3],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	function arrayToString(a)
	{
		return "["+a.map(taskToString).join()+"]";
	}
	function taskToString(t)
	{
		if(t.constructor == Array) return arrayToString(t);
		if(t.constructor == String) return '"'+t+'"';
	}
	console.log(taskToString($$[$0-1][1])); return $$[$0-1][1];	

break;
case 2:
this.$=['exp',['ifThenElse',[$$[$0-10],$$[$0-6],$$[$0-2]]]];
break;
case 3:
this.$=['exp',['ifThen',[$$[$0-6],$$[$0-2]]]];
break;
case 4:
this.$=['exp',['repeatUntil',[$$[$0-6],$$[$0-2]]]];
break;
case 5:
this.$=['exp',['repeat',[$$[$0-2]]]];
break;
case 6:
this.$=['exp',['stopRepeat',[$$[$0-2]]]];
break;
case 7:
this.$=['exp',['taskList',[['taskList',$$[$0]]]]];
break;
case 8:
this.$=['exp',$$[$0]]
break;
case 9:
this.$=['achieve',[$$[$0]]]
break;
case 10:
this.$=['tcc',[]];
break;
case 11:
this.$=['give',[$$[$0-4],$$[$0-2],$$[$0]]]
break;
case 12:
this.$=['giveEverything',[$$[$0-2]]]
break;
case 13:
this.$=['toss everything',[]]
break;
case 14:
this.$=['sdig',[$$[$0]]];
break;
case 15:
this.$=['sbuild',[$$[$0]]];
break;
case 16:
this.$=['cget',[$$[$0-2],$$[$0]]]
break;
case 17:
this.$=['replicate',[]]
break;
case 18:
this.$=['watch',[$$[$0]]]
break;
case 19:
this.$=['stop watch',[]]
break;
case 20:
this.$=['ssdig',[$$[$0]]];
break;
case 21:
this.$=['dig',[$$[$0]]];
break;
case 22:
this.$=['ssumove',[$$[$0]]];
break;
case 23:
this.$=['sumove',[$$[$0]]];
break;
case 24:
this.$=['smove',[$$[$0]]];
break;
case 25:
this.$=['move to',[$$[$0]]];
break;
case 26:
this.$=['move',[$$[$0]]];
break;
case 27:
this.$=['pos',[$$[$0]]];
break;
case 28:
this.$=['look for block',[$$[$0]]];
break;
case 29:
this.$=['look for entity',[$$[$0]]];
break;
case 30:
this.$=['stop move to',[]];
break;
case 31:
this.$=['list',[]];
break;
case 32:
this.$=['toss',[$$[$0-2],$$[$0]]];
break;
case 33:
this.$=['equip',[$$[$0-2],$$[$0]]];
break;
case 34:
this.$=['unequip',[$$[$0]]];
break;
case 35:
this.$=['look at',[$$[$0]]];
break;
case 36:
this.$=['say',[['message',$$[$0]]]];
break;
case 37:
this.$=['wait',[$$[$0]]];
break;
case 38:
this.$=['activate item',[]];
break;
case 39:
this.$=['deactivate item',[]];
break;
case 40:
this.$=['build',[$$[$0]]];
break;
case 41:
this.$=['craft',[$$[$0-2],$$[$0]]];
break;
case 42:
this.$=['jump',[]];
break;
case 43:
this.$=['dig forward',[$$[$0]]];
break;
case 44:
this.$=['immure',[$$[$0]]];
break;
case 45:
this.$=['attack',[$$[$0]]];
break;
case 46:
this.$=['shoot',[$$[$0]]];
break;
case 47:
this.$=['get',[$$[$0]]];
break;
case 48:
this.$=['sget',[$$[$0]]];
break;
case 49:
this.$=['follow',[$$[$0]]];
break;
case 50:
this.$=['up',[]]
break;
case 51:
this.$=['nothing',[]]
break;
case 52:
this.$=[$$[$0],[]];
break;
case 53:
this.$=['int',$$[$0]]
break;
case 54:
this.$=$$[$0-1]
break;
case 55:
this.$=$$[$0-2]+' '+$$[$0]
break;
case 56:
this.$=['destination',$$[$0]]
break;
case 57:
this.$=['simpleItem',$$[$0]]
break;
case 58:
this.$=['item',$$[$0][1]]
break;
case 59:
this.$=['item',$$[$0-2]+' '+$$[$0][1]]
break;
case 60:
this.$=['item',$$[$0]]
break;
case 61:
this.$=['simplePlayer',$$[$0]]
break;
case 62: case 63:
this.$=['entity',$$[$0]]
break;
case 64:
this.$=['entity',$$[$0-2]+' '+$$[$0][1]]
break;
case 65: case 66: case 67: case 68: case 69:
this.$=['entity',$$[$0-2]+' '+$$[$0]]
break;
case 70: case 71: case 72: case 73: case 78:
this.$=$$[$0]
break;
case 75:
this.$=$$[$0-2]+' '+$$[$0][1];
break;
case 76: case 77:
this.$=$$[$0][1]
break;
case 79: case 80:
this.$=['position',$$[$0]]
break;
case 81:
this.$=['position',$$[$0-2]+$$[$0-1]+$$[$0]]
break;
case 82:
this.$=['position',$$[$0-2]+' '+$$[$0][1]]
break;
case 83:
this.$=['simpleBlock',$$[$0][1]]
break;
case 84:
this.$=['simpleBlock',$$[$0]]
break;
case 85:
this.$=['blockName',$$[$0]]
break;
case 86:
this.$=['block',$$[$0-2]+' '+$$[$0][1]]
break;
case 87:
$$[$0].unshift($$[$0-4]);this.$=$$[$0]
break;
case 88:
this.$=[$$[$0-2]]
break;
case 89: case 90: case 91: case 93:
this.$=['condition',[$$[$0-2],[$$[$0]]]]
break;
case 92:
this.$=['condition',[$$[$0-4],[$$[$0-2],$$[$0]]]]
break;
case 94:
this.$=['condition',[$$[$0],[]]]
break;
}
},
table: [{3:1,4:2,6:$V0,12:$V1,15:$V2,16:$V3,18:7,19:$V4,20:$V5,21:$V6,26:$V7,27:$V8,28:$V9,29:$Va,31:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,44:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{1:[3]},{5:[1,50]},{7:[1,51]},{7:[1,52]},{7:[1,53]},{7:[1,54]},o($VK,[2,8]),{7:[1,55]},o($VK,[2,10]),{7:[1,56]},o($VK,[2,13]),{7:[1,57]},{7:[1,58]},{7:[1,59]},o($VK,[2,17]),{7:[1,60]},o($VK,[2,19]),{7:[1,61]},{7:[1,62]},{7:[1,63]},{7:[1,64]},{7:[1,65]},{7:[1,66]},{7:[1,67]},{7:[1,68]},{7:[1,69]},o($VK,[2,30]),o($VK,[2,31]),{7:[1,70]},{7:[1,71]},{7:[1,72]},{7:[1,73]},{7:[1,74]},{7:[1,75]},o($VK,[2,38]),o($VK,[2,39]),{7:[1,76]},{7:[1,77]},o($VK,[2,42]),{7:[1,78]},{7:[1,79]},{7:[1,80]},{7:[1,81]},{7:[1,82]},{7:[1,83]},{7:[1,84]},o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),{1:[2,1]},{8:85,71:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{4:92,6:$V0,12:$V1,15:$V2,16:$V3,18:7,19:$V4,20:$V5,21:$V6,26:$V7,27:$V8,28:$V9,29:$Va,31:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,44:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{4:93,6:$V0,12:$V1,15:$V2,16:$V3,18:7,19:$V4,20:$V5,21:$V6,26:$V7,27:$V8,28:$V9,29:$Va,31:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,44:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{4:95,6:$V0,12:$V1,15:$V2,16:$V3,17:94,18:7,19:$V4,20:$V5,21:$V6,26:$V7,27:$V8,28:$V9,29:$Va,31:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,44:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{8:96,71:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{7:$VR,22:97,33:102,45:103,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,87:98,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21},o($VK,$VR,{87:98,33:102,45:103,22:114,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:115,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{23:116,72:$V31},{33:118,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ},o($VK,$VR,{87:98,33:102,45:103,22:119,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:120,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:121,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:122,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:123,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:124,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:125,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{43:126,71:$V41},{33:129,45:128,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,94:$V21},{23:130,72:$V31},{50:131,71:[1,132]},{24:133,30:134,71:$V51,74:$V61,75:$V71},o($VK,$VR,{87:98,33:102,45:103,22:138,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{54:139,71:$V81},{23:141,72:$V31},o($VK,$VR,{87:98,33:102,45:103,22:142,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{23:143,72:$V31},o($VK,$VR,{87:98,33:102,45:103,22:144,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:145,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{33:146,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ},{33:147,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ},{66:148,71:$V91,86:$Va1,93:149},{66:152,71:$V91,86:$Va1,93:149},o($VK,$VR,{87:98,33:102,45:103,22:153,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{7:[1,154]},{7:[1,155]},{7:[1,156]},{7:[1,157]},{7:[1,158]},{7:[1,159]},o($VK,[2,94]),{7:[1,160]},{7:[1,161]},o($VK,[2,7]),{7:[1,162]},o($VK,[2,9]),{7:[1,163]},o($VK,[2,79]),o($VK,[2,80],{91:[1,164]}),{7:[1,165]},{7:[1,166]},o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,78]),o($VK,[2,62]),o($VK,[2,63]),{7:[1,167]},{7:[1,168]},{7:[1,169]},{7:[1,170]},{7:[1,171]},{7:[1,172]},{7:[1,173]},o($VK,[2,14]),o($VK,[2,15]),{7:[1,174]},o($VK,[2,53]),o($VK,[2,18]),o($VK,[2,20]),o($VK,[2,21]),o($VK,[2,22]),o($VK,[2,23]),o($VK,[2,24]),o($VK,[2,25]),o($VK,[2,26]),o($VK,[2,27]),o($VK,[2,61]),o($VK,[2,28]),o($VK,[2,29]),{7:[1,175]},{7:[1,176]},{7:[2,56]},o($VK,[2,34]),o($VK,[2,58]),{7:[1,177]},o($VK,[2,60]),o($VK,[2,57]),o($VK,[2,35]),o($VK,[2,36]),{7:[1,179],73:[1,178]},o($VK,[2,37]),o($VK,[2,40]),{7:[1,180]},o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,48]),o($VK,[2,49]),{9:[1,181]},o($VK,$VR,{87:98,33:102,45:103,22:182,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:183,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{71:$V91,93:184},{23:185,72:$V31},o($VK,$VR,{87:98,33:102,45:103,22:186,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{13:[1,187],14:[1,188]},{14:[1,189]},{9:[1,190],14:[1,191]},{23:192,25:[1,193],72:$V31},o($VK,$VR,{33:102,45:103,87:194,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,94:$V21}),o($VK,$VR,{87:98,33:102,45:103,22:195,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ,88:$V_,89:$V$,90:$V01,92:$V11,94:$V21}),{33:196,76:$VS,77:$VT,78:$VU,79:$VV,81:$VW,83:$VX,84:$VY,85:$VZ},{43:197,71:$V41},{71:$Vb1,80:198,86:$Vc1},{71:$Vd1,82:201,86:$Ve1},{71:$Vb1,80:204,86:$Vc1},{71:$Vb1,80:205,86:$Vc1},{71:$Vd1,82:206,86:$Ve1},{66:207,71:$V91,86:$Va1,93:149},{30:208,71:$V51},{30:209,71:$V51},{24:210,30:134,71:$V51,74:$V61,75:$V71},{66:211,71:$V91,86:$Va1,93:149},o($VK,[2,54]),{54:212,71:$V81},{30:213,71:$V51},{7:[1,214]},o($VK,[2,89]),o($VK,[2,90]),o($VK,[2,91]),{7:[1,215]},o($VK,[2,93]),{7:[1,216]},o($VK,[2,5]),o($VK,[2,6]),{7:[1,217]},o($VK,[2,88]),{7:[1,218]},o($VK,[2,12]),o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,75]),o($VK,[2,64]),o($VK,[2,65]),o($VK,[2,70]),o($VK,[2,71]),o($VK,[2,66]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,67]),o($VK,[2,68]),o($VK,[2,69]),o($VK,[2,86]),o($VK,[2,16]),o($VK,[2,32]),o($VK,[2,33]),o($VK,[2,59]),o($VK,[2,55]),o($VK,[2,41]),{4:219,6:$V0,12:$V1,15:$V2,16:$V3,18:7,19:$V4,20:$V5,21:$V6,26:$V7,27:$V8,28:$V9,29:$Va,31:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,44:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{30:220,71:$V51},{8:221,71:$VL,95:$VM,96:$VN,97:$VO,98:$VP,99:$VQ},{4:95,6:$V0,12:$V1,15:$V2,16:$V3,17:222,18:7,19:$V4,20:$V5,21:$V6,26:$V7,27:$V8,28:$V9,29:$Va,31:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,44:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{24:223,30:134,71:$V51,74:$V61,75:$V71},{7:[1,224]},o($VK,[2,92]),{7:[1,225]},o($VK,[2,87]),o($VK,[2,11]),{10:[1,226],11:[1,227]},{14:[1,228]},{7:[1,229]},o($VK,[2,3]),o($VK,[2,4]),{4:230,6:$V0,12:$V1,15:$V2,16:$V3,18:7,19:$V4,20:$V5,21:$V6,26:$V7,27:$V8,28:$V9,29:$Va,31:$Vb,32:$Vc,34:$Vd,35:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,42:$Vl,44:$Vm,46:$Vn,47:$Vo,48:$Vp,49:$Vq,51:$Vr,52:$Vs,53:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ},{7:[1,231]},{11:[1,232]},o($VK,[2,2])],
defaultActions: {50:[2,1],132:[2,56]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 6;
break;
case 1:return 16;
break;
case 2:return 10;
break;
case 3:return 11;
break;
case 4:return 12;
break;
case 5:return 14;
break;
case 6:return 15;
break;
case 7:return 9;
break;
case 8:return 21;
break;
case 9:return 35;
break;
case 10:return 26;
break;
case 11:return 25;
break;
case 12:return 95;
break;
case 13:return 96;
break;
case 14:return 28;
break;
case 15:return 27;
break;
case 16:return 13;
break;
case 17:return 97;
break;
case 18:return 61;
break;
case 19:return 36;
break;
case 20:return 29;
break;
case 21:return 98;
break;
case 22:return 34;
break;
case 23:return 31;
break;
case 24:return 32;
break;
case 25:return 19;
break;
case 26:return 37;
break;
case 27:return 38;
break;
case 28:return 39;
break;
case 29:return 40;
break;
case 30:return 41;
break;
case 31:return 42;
break;
case 32:return 74;
break;
case 33:return 75;
break;
case 34:return 44;
break;
case 35:return 46;
break;
case 36:return 77;
break;
case 37:return 88;
break;
case 38:return 47;
break;
case 39:return 48;
break;
case 40:return 49;
break;
case 41:return 62;
break;
case 42:return 51;
break;
case 43:return 52;
break;
case 44:return 20;
break;
case 45:return 53;
break;
case 46:return 55;
break;
case 47:return 56;
break;
case 48:return 57;
break;
case 49:return 58;
break;
case 50:return 70;
break;
case 51:return 59;
break;
case 52:return 60;
break;
case 53:return 63;
break;
case 54:return 64;
break;
case 55:return 67;
break;
case 56:return 65;
break;
case 57:return 68;
break;
case 58:return 91;
break;
case 59:return 78;
break;
case 60:return 92;
break;
case 61:return 94;
break;
case 62:return 79;
break;
case 63:return 81;
break;
case 64:return 83;
break;
case 65:return 84;
break;
case 66:return 85;
break;
case 67:return 76;
break;
case 68:return 86;
break;
case 69:return ';';
break;
case 70:return 99;
break;
case 71:return 69;
break;
case 72:return 90;
break;
case 73:return 89;
break;
case 74:return 73;
break;
case 75:return 72
break;
case 76:return 71;
break;
case 77:return 7;
break;
case 78:return 5;
break;
}
},
rules: [/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:endif\b)/,/^(?:repeat\b)/,/^(?:done\b)/,/^(?:stop repeat\b)/,/^(?:then\b)/,/^(?:give\b)/,/^(?:ssdig\b)/,/^(?:toss everything\b)/,/^(?:everything\b)/,/^(?:is empty\b)/,/^(?:is not empty\b)/,/^(?:sbuild\b)/,/^(?:sdig\b)/,/^(?:until\b)/,/^(?:close of\b)/,/^(?:dig forward\b)/,/^(?:dig\b)/,/^(?:cget\b)/,/^(?:have\b)/,/^(?:stop watch\b)/,/^(?:replicate\b)/,/^(?:watch\b)/,/^(?:achieve\b)/,/^(?:ssumove\b)/,/^(?:sumove\b)/,/^(?:smove\b)/,/^(?:move to\b)/,/^(?:move\b)/,/^(?:pos\b)/,/^(?:tool to break\b)/,/^(?:item to build\b)/,/^(?:look for\b)/,/^(?:stop move to\b)/,/^(?:bot\b)/,/^(?:adapted\b)/,/^(?:list\b)/,/^(?:toss\b)/,/^(?:equip\b)/,/^(?:immure\b)/,/^(?:unequip\b)/,/^(?:look at\b)/,/^(?:tcc\b)/,/^(?:say\b)/,/^(?:wait\b)/,/^(?:activate item\b)/,/^(?:deactivate item\b)/,/^(?:build\b)/,/^(?:nothing\b)/,/^(?:craft\b)/,/^(?:jump\b)/,/^(?:attack\b)/,/^(?:shoot\b)/,/^(?:sget\b)/,/^(?:get\b)/,/^(?:follow\b)/,/^(?:\+)/,/^(?:player\b)/,/^(?:nearest reachable position\b)/,/^(?:nearest block\b)/,/^(?:nearest mob\b)/,/^(?:nearest object\b)/,/^(?:nearest visible mob\b)/,/^(?:nearest reachable mob\b)/,/^(?:nearest reachable object\b)/,/^(?:me\b)/,/^(?:\*)/,/^(?:;)/,/^(?:at\b)/,/^(?:up\b)/,/^(?:r-?[0-9]+(?:\.[0-9]+)?,-?[0-9]+(?:\.[0-9]+)?,-?[0-9]+(?:\.[0-9]+)?)/,/^(?:-?[0-9]+(?:\.[0-9]+)?,-?[0-9]+(?:\.[0-9]+)?,-?[0-9]+(?:\.[0-9]+)?)/,/^(?:\.)/,/^(?:[0-9]+)/,/^(?:[A-Za-z0-9,]+)/,/^(?:\s+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}